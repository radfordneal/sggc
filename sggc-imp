SGGC - A LIBRARY SUPPORTING SEGMENTED GENERATIONAL GARBAGE COLLECTION
       Documentation on design and internal implementation details

Copyright (c) 2016, 2017 Radford M. Neal.

   The SGGC library is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License along
   with this program; if not, write to the Free Software Foundation, Inc.,
   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.


INTRODUCTION

SGGC manages "objects", containing data and other information, using a
"mark and sweep" garbage collector, modified to use several
"generations", so that a complete mark and sweep is done only
occasionally.  The design of SGGC is meant to allow an application to
use a memory-efficient storage scheme, while also providing fast
access to data.

Internally, SGGC uses "compressed pointers" to refer to objects,
consisting of a segment index and offset within segment.  The set
facility described in set-doc is used to manage sets of objects in
terms of such compressed pointers.  The application may also use
compressed pointers exclusively, or may use regular pointers except
when communicating with the SGGC functions.

See sggc-doc for details on the application interface for SGGC,
knowledge of which is assumed in this document.


INITIALIZATION

Currently, the maximum number of segments that may be used is fixed at
initialization time, when several arrays of that size are allocated.
Alternatively, when SGGC_MAX_SEGMENTS is defined, the maximum is fixed
at compile time, and the arrays allocated statically, which may
slightly improve speed.  This maximum is limited to 2^26-1, by the
number of bits used to store a segment index, but always allocating
space for this maximum by setting SGGC_MAX_SEGMENTS to that would
occupy an excessive amount of virtual memory on some systems.

More options for initialization may be provided in future.  For
example, there could be an option to allow dynamic increases in the
number of segments, by copying the arrays subscripted by segment
indexes to larger arrays.


REPRESENTATION OF DATA AND OTHER INFORMATION FOR AN OBJECT

The data and other information for an object consist of a single-byte
"type" for the object, a main data part, and optionally up to two
pieces of auxiliary information.

The type is the same for all objects in a segment, and therefore does
not need to be stored for each object.  (This is one reason that types
are handled separately from other information about an object.)  Types
for segments are stored in an array of unsigned characters, which is
subscripted by the segment index part of a compressed pointer to
obtain the type for an object.

The main data part of an object can vary in size, according to the
object's type and "length", in a manner defined by the application,
using the concept of a segment "kind" (which includes both the object
type and something about size).  The number of bytes of data
associated with an object is always a multiple of SGGC_CHUNK_SIZE,
which is defined by the application, and which for efficiency should
be a power of two (allowing multiplication by shifting).  The
application specifies the number of chunks for each kind of object.
The number of chunks of data associated with an object might sometimes
be more than required, in order to limit the number of "kinds", which
may allow better reuse of data space, or because the application
wishes to allow for the possibility that the amount of data needed for
an object could increase during its lifetime.

Objects with data of indefinite size are put in "big" segments, which
are of a kind for which the number of chunks is specified as zero
(meaning anything).  Big segments contain only one object, with
"offset" zero.  The number of objects using big segments is therefore
limited to at most 2^26-1, which is about 64 million (less if there
are also some small segments), but if these big objects are indeed
big, exceeding this limit is likely to require more memory than would
typically be available.

Small segments may contain more than one object, and are of a kind
with a specified number of chunks of data for an object, which will be
between 1 and SGGC_CHUNKS_IN_SMALL_SEGMENT, currently 64.  The data
for all objects in the segment is allocated as a contiguous block of
SGGC_CHUNK_SIZE times SGGC_CHUNKS_IN_SMALL_SEGMENT bytes.  If the
number of chunks of data for the kind is 1, a segment of this kind can
contain up to 64 objects, which will have offsets from 0 to 63.  The
number of possible objects in a segment is reduced if they require
more than one chunk for their data - eg, a segment of a kind for which
the number of chunks of data is 5 will be able to store only 12
objects, which are given offsets of 0, 5, 10, 15, ..., 55.  Currently,
there will be 4 chunks of unused space at the end of the data space
for such a segment.  This is done in order to keep the data for all
small segments the same size, which would aid reuse (though resuse is
not currently implemented).

With this scheme, the maximum amount of memory that can be occupied by
the data for small segments is 2^26-1 times 64 times SGGC_CHUNK_SIZE
(less if there are also some big segments).  A typical value for
SGGC_CHUNK_SIZE might be 16, which would give a limit of about 32
Gigabytes of data in small segments.

With this scheme for assigning offsets to objects, finding the address
of the data for an object from a compressed pointer to it can be done
as follows:

  1) Find the address of the data block for the segment by indexing
     an array of pointers by the index part of the compressed pointer.

  2) Add SGGC_CHUNK_SIZE times the offset part of the compressed
     pointer to the address of the data block found in (1).  The
     required multiply will reduce to a shift if SGGC_CHUNK_SIZE is a
     power of two.

Step (1) will involve fetching the pointer to the array of data block
pointers (which may often have previously been fetched into a
register, since it will be needed for many accesses), shifting the
compressed pointer right to obtain the index part, and then doing an
indexed fetch of the data block address.  Step (2) will involve
masking out the offset part of the compressed pointer, shifting it to
perform the multiplication by SGGC_CHUNK_SIZE, and then adding it to
the data block address.  The last addition (and perhaps the
multiplication) may in some cases be merged with further address
arithmetic that is needed to obtain a particular item from the
object's data.

If used by the application, auxiliary information 1 is the same size
(SGGC_AUX1_SIZE) for all objects, and is allocated in blocks
containing sufficient space for some multiple (SGGC_AUX1_BLOCK_SIZE)
of the amount needed for SGGC_CHUNKS_IN_SMALL_SEGMENT objects (which
is the maximum number of objects that might be in a segment, currently
64).  An application might arrange that the size of these allocation
blocks is the same as the size of a data block for a small segment,
since this might help with allocation and reuse by malloc.

The address of the auxiliary information for an object is found from a
compressed pointer in the same way as data is found, described by
steps (1) and (2) above, except that SGGC_CHUNK_SIZE is replaced by
SGGC_AUX1_SIZE, and of course a different array of pointers is used.
Auxiliary information may often consist of a single small data item,
in which case the processor may have indexing instructions that will
allow these steps to be performed especially quickly.

Small segments for which an object's data occupies more than one chunk
cannot contain objects with all possible offsets.  Accordingly, the
auxiliary information found in this way is distributed with unused
gaps between the parts that are (or may be) used by objects in one
segment.  To avoid wasting this space, multiple segments of the same
kind share the same space for auxiliary information, in an interleaved
fashion.  Similarly, many big segments, containing only one object,
will be allocated auxiliary information from one allocation block.

If the application also uses auxiliary information 2, it is handled in
the same way as auxiliary information 1.

An application may arrange that auxiliary information 1 and/or 2 for
some kinds of segments is read-only, and perhaps shared between
segments.  In particular, if the auxiliary information is irrelevant
for some type of object, it can be set to shared dummy data, avoiding
wasting space for this information when it is not used.  However,
auxiliary information cannot be read-only for "big" segments, since
this would make re-using space for auxiliary information harder.

In addition to possible quicker access and perhaps sharing, another
reason for use of auxiliary information may be that it could let other
data fit neatly (considering alignment requirements) in some multiple
of SGGC_CHUNK_SIZE bytes, without wasteful padding.


MORE ON OFFSET ARITHMETIC

In step (2) of finding the location of the data for an object (or
similarly, the auxiliary information), the multiplication done will
result in a small integer, which could be held in as few as 16 bits.
However, depending on the machine used, it may be faster to do
arithmetic in some other integer type, perhaps with the same bit width
as a pointer.  The SGGC_OFFSET_CALC symbol may be defined (and has a
default in sggc.h) to be a cast to whichever size of arithemtic is
chosen.

The need to mask out just the offset part of a compressed pointer when
computing the address of its data or auxiliary information may be
eliminated by adjusting the pointers to data or auxiliary information
for a segment so that the correct result is obtained when the unmasked
index is present along with the offset.  This method is enabled if
SGGC is compiled with SGGC_USE_OFFSET_POINTERS defined as 1 (versus
being defined as 0 or not defined at all).  A different
SGGC_OFFSET_CALC type might be best when SGGC_USE_OFFSET_POINTERS is
1.  Any unsigned integer type of at least 16 bits should work, but
whether uint16_t, uint32_t, or uintptr_t is faster might depend on the
machine used.  Note that consistent use of one unsigned type is
necessary, so that overflow (which may happen, and produces a
well-defined result for unsigned types) will always occur in the same
manner, leading to cancellation of all but the desired part of the
operation.


GENERATIONAL GARBAGE COLLECTION

The design of SGGC assumes that it is typical for many objects to be
allocated, used briefly, and then no longer referenced, while some
other objects are allocated and then used (or at least are still
referenced) for a long time.

Accordingly, SGGC uses a "generational" garbage collector in which
objects that have survived one or two garbage collections are regarded
as being in "old generation 1" or "old generation 2", and are not
garbage collected unless a "level 1" or "level 2" garbage collection
is done.  Collection at "level 0" looks (mostly) at only those objects
that were allocated since the last garbage collection, and will not
recover unused objects in old generations 1 or 2.  Similarly,
collection at level 1 looks only at newly-allocated objects and
objects in old generation 1, and will not recover unused objects in
old generation 2.  Collection at level 2 looks at all objects (except
constants and (mostly) uncollected objects), and will recover all
unused objects, but of course takes longer than a level 0 or level 1
collection.

When collecting at level 0 or level 1, it is necessary to handle the
possibility that some objects in the generations being collected are
referred to by an object that is not being collected, and hence is not
looked at by the usual marking procedure.  It is assumed that such
references are fairly uncommon, as otherwise the generational scheme
will not be advantageous.  The exceptions where old-to-new references
do exist are handled by keeping track of which objects in old
generation 1 or old generation 2 may contain such references, assisted
by the application calling the sggc_old_to_new_check procedure when
necessary, as documented in sggc-doc.

Similarly, with proper use of the sggc_old_to_new_check procedure,
references from an uncollected object to an object that is collected
will result in the uncollected object being included in the old-to-new
set, so that the collected object will be seen as still being in use.
If the uncollected object is later changed to not refer to any
collected objects, it will (eventually) be removed from the old-to-new
set.

Constant objects may reference only other constant objects, but may be
referenced from any object.  Constant objects may also be stored in
read-only memory.  Constant objects are never looked at or collected
by the garbage collector.


SETS OF OBJECTS

SGGC maintains several sets of objects, using the set facilities
documented in set-doc.  Some of these sets share the same 'chain'.
There are five chains, identified by symbols defined in set-app.h (the
application specific header file for use of the set facility by SGGC),
as follows:

  SET_UNUSED_FREE_NEW   Used for sets of free or newly-allocated objects
                        of different kinds, called 'free_or_new[k]'
                        for each kind k, and a set of unused big
                        segments, called 'unused'.

  SET_OLD_GEN1          Used for sets of objects in old generation 1,
                        separated by kind, called 'old_gen1[k]', plus
                        'old_gen1_big' for the big kinds.

  SET_OLD_GEN2_UNCOL    Used for sets of objects in old generation 2,
                        separated by kind, called 'old_gen2[k]', plus
                        'old_gen2_big' for the big kinds, as well as
                        for the sets of uncollected objects, by kind,
                        called 'uncollected[k]', and for the set of
                        constant objects, called 'constants'.

  SET_OLD_TO_NEW        Used for the set of objects possibly having 
                        old-to-new references, called 'old_to_new'.

  SET_LOOK_AT           Used for the set of objects that need to be
                        looked at to follow pointers they contain,
                        called 'to_look_at'.

Separating 'old_gen1' and 'old_gen2' into different sets for each kind
is necessary only for identification of newly-freed objects of a given
kind, in order to implement sggc_call_for_newly_freed_object.  There
is little overhead to this separation, however, and it may even
produce a slight efficiency advantage.  Note that big kinds must be
put in a separate, single, set since big segments can change their
kind, and would not be removed from a per-kind old_gen set in a way
that would allow them to change to another set sharing the same chain
(something possible only for removal with set_first).  This is OK,
because the 'free_or_new[k]' set for a big kind k contains all and
only the newly-free big objects of kind k (with no objects freed in
earlier collections).

The 'uncollected[k]' sets are needed only to allow implementation of
sggc_first_uncollected_of_kind and sggc_next_uncollected_of_kind.

When a garbage collection is not in progress, the 'to_look_at' set is
empty.  During a garbage collection, as objects are marked as in use,
from sggc_find_root_ptrs or sggc_find_object_ptrs calling
sggc_look_at, they are added to the 'to_look_at' set, from which
objects are repeatedly removed, and passed to sggc_find_object_ptrs,
until the 'to_look_at' set becomes empty.  This avoids use of
recursion to following references to objects from other objects.

The 'constants' set is added to only when the application registers a
new constant object, and never has elements removed.  Constants can be
distinguished from objects in the 'old_gen2' sets (which share the
same chain) by 'constant' flag in the segment description.  The
'uncollected' sets can share a chain with the 'old_gen2' sets because
uncollected objects are in a disjoint collection of segments, which
can be distinguished by their kind.  The fact that old generation 2,
uncollected, and constant objects are in the same chain is convenient
when checking whether a new reference stored in an object requires
putting the object in 'old_to_new'.

Note that with five chains, plus four bytes of extra information used
by SGGC, the size of a set_segment structure is 64 bytes, which may be
a good size for cache performance.  As a power of two, it also allows
efficient indexing in an array of segments, which is used with one
implementation option (the alternative being to use an array of
pointers to segments).


ALLOCATING AND FREEING OBJECTS

Between calls of sggc_collect, for collected kinds, k, that use small
segments, the set 'free_or_new[[k]' contains objects in segments that
have data and auxiliary information allocated.  Some of these objects
are newly-allocated (since the last call of sggc_collect), and may
still be in use, and others are free.  The objects known to be free
start at 'sggc_next_free_val[k]', and continue to the end of the set,
except that if 'sggc_next_segment_not_free[k]' is 1, only the objects
in the same segment as 'sggc_next_free_val[k]' are still free (this
happens when the free objects in 'free_or_new[k]' have all been used,
and new segments of free objects are being allocated, and put at the
front of 'free_or_new[k]').

If k uses big segments, 'free_or_new[[k]' contains only newly
allocated objects between calls of sggc_collect.  Allocation for
objects that are stored in big segments is done by looking for an
existing segment in the 'unused' set, which is shared by all the kinds
that use big segments.  These objects have auxiliary information
already allocated (which is the same for all kinds, and cannot be
read-only), but do not have a data area allocated - one is allocated
using sggc_alloc_zeroed when the segment becomes used.  If 'unused' is
empty, sggc_alloc_zeroed is used to allocate a new segment, data, and
auxiliary information (if a partial block is not already allocated).

Objects of an uncollected kind are allocated in the same way, except
that there will never be more than one segment of free objects, which
will have recently been created with sggc_alloc_zeroed, since
allocated objects of this kind never become free.  Uncollected objects
of kind k are added to the 'uncollected[k]' set when allocated, not to
'free_or_new[k]'.

The sggc_alloc_small_kind_quickly function uses a bit vector, called
'sggc_next_free_bits[k]', to represent the free objects of kind k in
the segment that such free objects are currently being taken from,
with the next free object being 'sggc_next_free_val[k]'.  When
'sggc_next_free_bits[k]' is zero, allocation of a new object will
require allocating a new segment, but this is not done by the
sggc_alloc_small_kind_quickly function, which instead just returns
SGGC_NO_OBJECT (this reduces the amount of code that is inlined for
sggc_alloc_small_kind_quickly).  These variables are updated after an
object is allocated to the values indicating the object that will be
allocated next (for collected objects, they are also initialized after
a garbage collection).  For uncollected kinds, 'sggc_next_free_val[k]'
is in a newly-allocated segment that does not exist in the
'free_or_new[k]' set (which is always empty for uncollected kinds).
For collected kinds, the object 'sggc_next_free_val[k]' will be in the
'free_or_new[k]' set.

At the start of garbage collection at level 1, objects in 'old_gen1[k]' 
for each kind k are added to the 'free_or_new[k]' set.  For collection
at level 2, this is done for both 'old_gen1' and 'old_gen2'.

When during the marking stage of garbage collection, an object in a
generation being collected is found to still be in use, it is removed
from its 'free_or_new[k]' set (in sggc_look_at) and later (when looked
at) added to 'old_gen1[k]' if newly-allocated, or to 'old_gen2[k]' if
currently in 'old_gen1[k]', or left in 'old_gen2[k]' if it was already
there.  Note that the kind, k, for an object is determinable from the
compressed pointer to it, via the structure describing its segment.

Once the marking process has finished, the objects in all the
'free_or_new' sets are known to be unused.  However, some of them may
still be in 'old_gen2' or 'old_gen1', so these sets are scanned to
remove elements that are in a set in the SET_UNUSED_FREE_NEW chain.
Such objects are also removed from the 'old_to_new' set (see below).

If the application has registered a procedure that is to be called for
newly-freed objects of kind k, with sggc_call_for_newly_freed_objects,
the newly-freed objects are identified first in a scan of the initial
portion of 'free_or_new[k]' (prior to the portion with objects that
are not newly allocated), and after that during the scans of
'old_gen1[k]' and 'old_gen2[k]' (if a level 1 or level 2 collection is
being done).  The scan of 'free_or_new[k]' will remove free objects
from 'old_gen1' or 'old_gen2' that are encountered (which would
otherwise be done when scanning the 'old_gen1' and 'old_gen2' sets),
so that these newly-freed objects will not be found a second time.
Note that some of these newly-freed objects will not be in this
portion of 'free_or_new[k]', so scans of 'old_gen1' and 'old_gen2' are
still needed (at the corresponding collection levels).


HANDLING OLD-TO-NEW REFERENCES

When garbage collection is done at level 0, only newly-allocated
objects (generation 0) are potentially collected, so objects in old
generations 1 and 2 (and uncollected objects) do not need to be
examined - except that if an object in one of these older generations,
or an uncollected object, may refer to a newly-allocated object, this
must be visible to the garbage collector, so that it will not
erroneously reuse this referenced object.  Similarly, in a garbage
collection at level 1, objects in old generation 2 need not be
examined - except for those that may refer to newly-allocated objects
or objects in old generation 1.

To achieve this, the 'old_to_new' set contains objects in old
generation 1 that may refer to a newly-allocated (generation 0)
object, objects in old generation 2 that may refer to an object in
either generation 1 or generation 0, and uncollected objects that may
refer to any object other than a constant or another uncollected
object.  Whan a garbage collection is done, the objects in the
'old_to_new' set are scanned, and any references to an object in a
generation being collected from an object in a generation that is not
being collected that is in the 'old_to_new' set is noted as being
referenced.  Also during this scan, objects in the 'old_to_new" set
that will no longer contain a reference to a younger object after this
collection are removed from 'old_to_new'.

During a level 0 garbage collection, old-to-new entries for objects in
old generation 1 can be removed (after being used), since after
collection any referenced objects in generation 0 will also be in old
generation 1, and hence there will no longer be any old-to-new
references.  In a level 0 collection, old-to-new entries for objects
in old generation 2 must be retained if they have any references to
objects in generation 0 or 1, which will both be in generation 1 after
the level 0 collection.

In a level 1 or level 2 garbage collection, objects in 'old_to_new'
that are currently in old generation 1 (and hence will be in old
generation 2 after the collection, if they survive) are examined, but
only to determine whether or not they should remain in the
'old_to_new' set.  References to newly-allocated objects from these
objects are not marked as in use, since it is unknown whether or not
the object referring to them is still in use.  (They will be marked by
the usual process if the referring object is in use.)  However, if a
reference to a newly-allocated object is found, the generation 1
object referring to it is not removed from 'old_to_new', since if this
object survives collection, becoming generation 2, it will contain a
reference to a generation 1 object.  Once such a reference is found,
no further references need be examined, so sggc_look_at for further
calls for the object quickly returns (after checking a flag value).

At all collection levels, an uncollected object in 'old_to_new' must
remain there unless it contains only references to constants and to
other uncollected objects.

The actions to do for old-to-new references when collecting at each
level are summarized below ("u" means an uncollected object):

  level 0:
  
      gen    gen    keep in       stop       mark
     from     to   old-to-new?  looking?  the to ptr?

        u      0       yes         no        yes
        u      1       yes         no         no (won't anyway)
        u      2       yes         no         no (won't anyway)
        u      u        no         no         no (won't anyway)
  
        2      0       yes         no        yes
        2      1       yes         no         no (won't anyway)
        2      2        no         no         no (won't anyway)
        2      u        no         no         no (won't anyway)
  
        1      0        no         no        yes
        1      1        no         no         no (won't anyway)
        1      2        no         no         no (won't anyway)
        1      u        no         no         no (won't anyway)
  
  level 1:
  
      gen    gen    keep in       stop       mark
     from     to   old-to-new?  looking?  the to ptr?

        u      0       yes         no        yes
        u      1       yes         no        yes
        u      2       yes         no         no (won't anyway)
        u      u        no         no         no (won't anyway)
  
        2      0       yes         no        yes
        2      1        no         no        yes
        2      2        no         no         no (won't anyway)
        2      u        no         no         no (won't anyway)
  
        1      0       yes        yes         no
        1      1        no         no         no
        1      2        no         no         no (won't anyway)
        1      u        no         no         no (won't anyway)
  
  level 2:
  
      gen    gen    keep in       stop       mark
     from     to   old-to-new?  looking?  the to ptr?

        u      0       yes         no        yes
        u      1       yes         no        yes
        u      2       yes         no        yes
        u      u        no         no         no (won't anyway)
  
        2      0       yes        yes         no
        2      1        no         no         no
        2      2        no         no         no
        2      u        no         no         no (won't anyway)
  
        1      0       yes        yes         no
        1      1        no         no         no
        1      2        no         no         no
        1      u        no         no         no (won't anyway)

In the above table, "won't anyway" means that the object won't be in
the 'free_or_new' set for its kind, and hence "marking" it by trying
to remove it from this set will have no effect.


IMPLEMENTATION OPTIONS

In additon to the SGGC_MAX_SEGMENTS, SGGC_USE_OFFSET_POINTERS, and
SGGC_OFFSET_CALC symbols mentioned above, several other pre-processor
symbols may be defined (eg, with a compiler flag) in order to select
different implementation options.  The first two below are primarily
useful for debugging and performance evaluation, since the default is
likely to be the best choice.

SET_USE_BUILTINS may be set to 0 or 1 to disable or enable use of the
gcc/clang builtin functions for finding and counting 1 bits.  The
default if this is not set is to use them if the compiler appears to
be gcc or clang.

SGGC_SEGMENT_AT_A_TIME may be set to 0 or 1 to disable or enable use
of segment-at-a-time functions provided by the set facility to speed
up some operations.

SGGC_USE_MEMSET may be defined (as anything) to enable use of memset
rather than a loop (possibly unrolled by the compiler) when clearning
the data area for an object in a small segment.  Since these objects
are typically small, it's not obvious which is faster.

SGGC_SEG_DIRECT may be defined (as anything) to enable use of a direct
array of segments, rather than the default of using an array of
pointers to segments.  This may be slightly faster, but will result in
a larger allocation of address space (and perhaps physical memory) if
not all the segments are actually used.  Note that all four
combinations of this option (or not) with or without SGGC_MAX_SEGMENTS
are allowed.

SGGC_HUGE_SHIFT is used when the number of chunks asked for for a big
segment is too large to fit in 21 bits.  In this case, the number of
chunks is automatically increased to a multiple of 2^SGGC_HUGE_SHIFT
so that the number can then be shifted right by SGGC_HUGE_SHIFT in
order to try to get it to fit in 21 bits.  The default when
SGGC_HUGE_SHIFT is not defined is 11, which limits the number of
chunks in an object to less than 2^32, which is suitable if
sggc_nchunks_t is defined to be uint32_t.


FUTURE IMPROVEMENTS

Possible (or likely) extensions and efficiency improvements for SGGC
include the following:

  o Currently, small segments of a given kind are never freed, nor
    reused for a different kind, which could cause problems if many
    objects of one kind are allocated, and then most of them become
    unused.  It would be possible to have a 'small_unused' set that
    contains objects in small segments that have only unused objects.
    Segments that are entirely free could be identified when
    allocating an object (moving them to 'small_unused' at that time,
    preferring to allocate from a partially-used segment), or in a
    separate pass over the 'free_or_new' sets at the end of a level 2
    garbage collection.  The currently unused set_move_first and
    set_move_next procedures provided by the set facility are intended
    to facilitate this.  The segments in 'small_unused' could then be
    reused for any small kind.  Their data areas might or might not be
    freed when they are put in 'small_unused' (perhaps only if a call
    of sggc_alloc_zeroed fails).

  o Currently, SGGC never frees memory used for auxiliary information,
    though it may be reused for other objects of the same kind (or a
    different kind, for big kinds).  If many objects of some kind are
    allocated, and then most of them become unused, this could lead to
    a large amount of memory being allocated but unused.  A block of
    memory used for auxiliary information could be freed once all
    objects using that block are no longer in use.  There is currently
    no data structure support for identifying such blocks, and adding
    such support would probably increase the amount of memory used per
    object, but these blocks could be identified by scanning the
    'free_or_new' and 'unused' sets while maintaining a hash table of
    auxiliary data block addresses.  There is current support
    (disabled by default) for finding the start of the auxiliary
    information block used by an object, via the aux1_off and aux2_off
    fields in a segment.

  o Currently, SGGC immediately frees the data area for a big segment
    once it is known to be unused.  This may be inefficient,
    especially if malloc uses high-overhead memory-mapping system
    calls to allocate and release data areas.  Some way of often
    reusing the data area for a future object that needs a data area
    with the same or slightly smaller size might be beneficial.

  o The space required to store types for segments could be eliminated
    by encoding the type in the segment index.  This would also speed
    up access to type information.  For example, if there are 32
    possible types, they could be identified by the low-order 5 bits
    of a segment index.  This would of course require that segments of
    different types be allocated indexes with the right low-order
    bits.  There would (for this example) be a limit of 2^21 (which is
    about 2 million) segments of any particular type.  If each segment
    had a data area of 1024 bytes, this would give a limit of 2 GBytes
    of data for one type, which might sometimes be a problem, though
    likely not on a system with a 32-bit address space.

  o A function could be provided that tries to expand the number of
    chunks in the data area for an object, in place.  This may fail,
    but would succeed for small objects if the new number of chunks
    fits in the same kind, and may succeed for big objects if the
    number of chunks was increased automatically, or if the C realloc
    function succeeds in reallocating the data area.  The alloc_chunks
    field currently records the necessary information for this.

  o A function could be provided that determines whether or not a
    32-bit word is a valid compressed pointer, to an object that is
    not currently free.  This could be done fairly efficiency (ie,
    with a fairly small number of fetches and tests, without any
    searching), by adding a flag in small segments that is set if any
    object in the segment is in the free portion of a free_or_new set.

  o Uncollected objects with old-to-new references could be kept in a
    separate set that uses the SET_OLD_TO_NEW chain (since they are
    in separate kinds, hence don't share segments with collected
    objects).  A record could then be kept of the youngest generation
    of any reference from an uncollected object, allowing scanning of
    the uncollected old-to-new set to be omitted at collection levels
    less than this.  This could also be done for collected objects,
    but one might expect that there would be little benefit for them,
    since they would almost always have a reference to the youngest
    generation.

    Alternatively, storing a reference to a collected object in an
    uncollected object could cause the collected object to be put in
    old generation 2, and in the 'old-to-new' set if it was not
    already in old generation 2 (in case it references younger
    objects).  It would then always be OK to scan the old-to-new set
    for uncollected objects only for level 2 garbage collections.

  o More information could be maintained in sggc_info to help the
    application decide when to call sggc_collect.
