SEGMENTED GENERATIONAL GARBAGE COLLECTOR

Copyright (c) 2016 Radford M. Neal.

   The SGGC library is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License along
   with this program; if not, write to the Free Software Foundation, Inc.,
   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.


INTRODUCTION

This library manages memory for "objects" that contain data, which may
include references to other objects.  It was designed for use by a
interpreter for a language such as R, though use in other applications
would also be possible.

The SGGC library provides the application with a function for
allocating a new object.  Memory for objects that are no longer in use
is automatically freed or reused.  To allow this, the application must
provide procedures for finding all "root" pointers, and for finding
all pointers to other objects that are contained in an object.  The
application also provides information regarding the types of objects,
and how much storage they require.

Objects are allocated in "segments", and can be referenced by a pair
consisting of a segment index and an offset within a segment.  Such
"compressed pointers" will typically fit in a 32-bit word, even when
regular pointers are 64 bits in size.  SGGC is designed to allow fast
translation of a compressed pointer to a regular pointer to data.

An application can choose whether to use such compressed pointers for
all object references, or to sometimes or always use regular pointers,
for its own purposes.  If regular pointers are used, however, each
object will need to store a compressed pointer to themselves in its
data space, to allow translation from regular to compressed pointers,
as will be needed for the application to pass compressed pointers to
SGGC.

Memory is freed using a "mark and sweep" garbage collector, with three
"generations" of objects, allowing quick recovery of recently
allocated objects without taking time for a full sweep.  The SGGC
library does not decide when a garbage collection (at any of the three
levels) will be done, but instead provides information allowing the
application to implement a policy in this regard.


USING SGGC IN AN APPLICATION

To use SGGC, an application should create a sggc-app.h file, which
must define some constants and declare some types (see below) and then
include the sggc.h file.

The following constants must be declared with #define in set-app.h,
before including sggc.h:

  SGGC_CHUNK_SIZE       Number of bytes in a data chunk.  Should be a 
                        power of two for efficiency.

  SGGC_N_TYPES          Number of types of objects.

  SGGC_N_KINDS          Number of kinds of objects (at least SGGC_N_TYPES).

  SGGC_KIND_CHUNKS      An array initializer giving the number of data 
                        chunks for each kind of object, 0 if the kind uses
                        big segments (with variable numbers of chunks).

The following may optionally be defined, if auxiliary information 1 or
auxiliary information 2 is to be used:

  SGGC_AUX1_SIZE        Number of bytes in auxiliary information 1 
                        (same for all kinds of objects).  Should be
                        a power of two for efficiency

  SGGC_AUX2_SIZE        Same, but for auxiliary information 2.

  SGGC_AUX1_BLOCK_SIZE  Number of blocks of auxiliary information 1
                        allocated at once (each block 

  SGGC_AUX2_BLOCK_SIZE

  SGGC_AUX1_READ_ONLY

  SGGC_AUX2_READ_ONLY

The following types must be defined in sggc-app.h:

  sggc_length_t
  sggc_nchunks_t

The sggc.h file should then be included at the end of sggc-app.h.  It
will define the following types:

  sggc_index_t
  sggc_cptr_t
  sggc_type_t
  sggc_kind_t

The following constant is also defined in set.h:

  SET_NO_OBJECT     A constant of type sggc_cptr_t that cannot be a
                    reference to an actual object, and hence can be
                    used to indicate "no object".

Finally, the sggc.h file will declare prototypes (or macros, or static
inline definitions) for the functions documented below.
